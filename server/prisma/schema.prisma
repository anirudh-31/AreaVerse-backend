generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                String   @id @default(uuid())
  username          String   @unique
  first_name        String
  last_name         String
  email             String   @unique
  profession        String?
  dateOfBirth       DateTime?
  isVerified        Boolean  @default(false)
  verificationToken String?
  verificationCode  String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  role              Role     @default(USER)
  authProvider      AuthType @default(LOCAL)
  passwordHash      String?
  neighborhoodId    String?  
  neighborhood      neighborhood? @relation(fields: [neighborhoodId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  refreshTokens     refreshtoken[]
  posts             post[]
  postEdits         posthistory[]
  followers         follow[]      @relation("UserFollowers")
  following         follow[]      @relation("UserFollowing")
  likes             like[]
  Comments          comment[]
  engagements       engagement[]
}

model neighborhood {
  id                   String   @id @default(uuid())
  name                 String   @unique
  city                 String
  state                String
  sentimentScore       Float    @default(0)
  electedRepresentative String?
  users                user[]
  country              String   
}

model refreshtoken {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  revoked     Boolean  @default(false)

  @@index([userId])
}

model post {
  id           String        @id @default(uuid())
  type         PostType
  title        String
  severity     Severity?
  description  String
  category     String
  status       PostStatus    @default(REPORTED)
  feedback     String?

  user_id      String
  user         user          @relation(fields: [user_id], references: [id])
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  commentCount Int           @default(0)
  viewCount    Int           @default(0)
  uniqueViews  Int           @default(0)

  engagements  engagement[]
  images       image[]
  histories    posthistory[]
  likes        like[]
  comments     comment[]
}

model image {
  id     String @id @default(uuid())
  url    String 
  postId String
  post   post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model posthistory {
  id        String     @id @default(uuid())
  postId    String
  post      post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  status    PostStatus
  changedBy String     
  user      user       @relation(fields: [changedBy], references: [id])
  message   String?
  createdAt DateTime   @default(now())
}

model follow{
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    user     @relation("UserFollowing", fields: [followerId], references: [id])
  following   user     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  @@unique([followerId, followingId])
}

model like{
  id        String   @id @default(uuid())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model comment{
  id         String   @id @default(uuid())
  content    String
  userId     String
  postId     String
  parentId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  replyCount Int      @default(0)
  
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) 
  replies   comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([parentId])
  @@index([userId])
}

model engagement {
  id        String         @id @default(uuid())
  userId    String?
  postId    String
  type      EngagementType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())

  user user? @relation(fields: [userId], references: [id])
  post post  @relation(fields: [postId], references: [id])

  @@unique([userId, postId, type])
}

enum Severity{
  LOW
  MEDIUM
  CRITICAL
}

enum PostType {
  ISSUE
  QUERY
  GENERAL
}
enum PostStatus {
  REPORTED
  UNDER_REVIEW
  APPROVED
  MORE_INFO_NEEDED
  REJECTED
  UPDATED
}

enum Role {
  ADMIN
  AGENT
  USER
}

enum AuthType {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum EngagementType {
  VIEW
  LIKE
  COMMENT
  SHARE
}